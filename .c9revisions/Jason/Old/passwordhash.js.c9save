{"ts":1362158164680,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362158168890,"patch":[[{"diffs":[[1,"function sha1Hash(msg)\n{\n    // constants [§4.2.1]\n    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n\n\n    // PREPROCESSING \n\n    // add trailing '1' bit to string [§5.1.1]\n    msg += String.fromCharCode(0x80); \n\n    // convert string msg into 512-bit/16-integer \n    // blocks arrays of ints [§5.2.1]\n\n    // long enough to contain msg plus 2-word length\n    var l = Math.ceil(msg.length/4) + 2;  \n    // in N 16-int blocks\n    var N = Math.ceil(l/16);             \n    var M = new Array(N);\n    for (var i=0; i<N; i++) {\n        M[i] = new Array(16);\n        // encode 4 chars per integer, big-endian encoding\n        for (var j=0; j<16; j++) {  \n            M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | \n                          (msg.charCodeAt(i*64+j*4+1)<<16) | \n                          (msg.charCodeAt(i*64+j*4+2)<<8) | \n                          (msg.charCodeAt(i*64+j*4+3));\n        }\n    }\n    // add length (in bits) into final pair of 32-bit integers \n    // (big-endian) [5.1.1]\n    // note: most significant word would be \n    // ((len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate \n    // this by arithmetic operators\n    M[N-1][14] = ((msg.length-1)*8) / Math.pow(2, 32); \n    M[N-1][14] = Math.floor(M[N-1][14]);\n    M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;\n\n    // set initial hash value [§5.3.1]\n    var H0 = 0x67452301;\n    var H1 = 0xefcdab89;\n    var H2 = 0x98badcfe;\n    var H3 = 0x10325476;\n    var H4 = 0xc3d2e1f0;\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(80); var a, b, c, d, e;\n    for (var i=0; i<N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t=0;  t<16; t++) \n            W[t] = M[i][t];\n        for (var t=16; t<80; t++) \n            W[t] = ROTL(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);\n\n        // 2 - initialise five working variables \n        // a, b, c, d, e with previous hash value\n        a = H0; b = H1; c = H2; d = H3; e = H4;\n\n        // 3 - main loop\n        for (var t=0; t<80; t++) {\n            // seq for blocks of 'f' functions and 'K' constants\n            var s = Math.floor(t/20); \n            var T = (ROTL(a,5) + f(s,b,c,d) + e + K[s] + W[t]) \n                          & 0xffffffff;\n            e = d;\n            d = c;\n            c = ROTL(b, 30);\n            b = a;\n            a = T;\n        }\n\n        // 4 - compute the new intermediate hash value\n\n        // note 'addition modulo 2^32'\n        H0 = (H0+a) & 0xffffffff;  \n        H1 = (H1+b) & 0xffffffff; \n        H2 = (H2+c) & 0xffffffff; \n        H3 = (H3+d) & 0xffffffff; \n        H4 = (H4+e) & 0xffffffff;\n    }\n\n    return H0.toHexStr() + H1.toHexStr() + H2.toHexStr() + \n                H3.toHexStr() + H4.toHexStr();\n}\n\n//\n// function 'f' [§4.1.1]\n//\nfunction f(s, x, y, z) \n{\n    switch (s) {\n    case 0: return (x & y) ^ (~x & z);           // Ch()\n    case 1: return x ^ y ^ z;                    // Parity()\n    case 2: return (x & y) ^ (x & z) ^ (y & z);  // Maj()\n    case 3: return x ^ y ^ z;                    // Parity()\n    }\n}\n\n//\n// rotate left (circular left shift) value x \n// by n positions [§3.2.5]\n//\nfunction ROTL(x, n)\n{\n    return (x<<n) | (x>>>(32-n));\n}\n\n//\n// extend Number class with a tailored hex-string method \n//   (note toString(16) is implementation-dependant, and \n//   in IE returns signed numbers when used on full words)\n//\nNumber.prototype.toHexStr = function()\n{\n    var s=\"\", v;\n    for (var i=7; i>=0; i--) { \n        v = (this>>>(i*4)) & 0xf; s += v.toString(16); }\n    return s;\n}"]],"start1":0,"start2":0,"length1":0,"length2":3542}]],"length":3542,"saved":false}
{"ts":1362158332066,"patch":[[{"diffs":[[1,"var msg = \"testing\";\nvar hashed = sha1Hash(msg);\nconsole.log(hashed);\n\n\n\n\n\n"],[0,"function sha1Has"]],"start1":0,"start2":0,"length1":16,"length2":91}]],"length":3617,"saved":false}
{"ts":1362158447018,"patch":[[{"diffs":[[0,"Str() + "],[-1,"\n                "],[0,"H3.toHex"]],"start1":2757,"start2":2757,"length1":33,"length2":16}]],"length":3600,"saved":false}
