{"ts":1352686965881,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n\n   Flowplayer v5.1.1 (Friday, 19. October 2012 04:24PM) | flowplayer.org/license\n\n*/\n!function($) { \n\n// auto-install (any video tag with parent .flowplayer)\n$(function() {\n   if (typeof $.fn.flowplayer == 'function') {\n      $(\"video\").parent(\".flowplayer\").flowplayer();\n   }\n});\n\nvar instances = [],\n   extensions = [],\n   UA = navigator.userAgent,\n   use_native = /iPhone/i.test(UA) || /Android/.test(UA) && /Firefox/.test(UA);\n\n\n/* flowplayer()  */\nwindow.flowplayer = function(fn) {\n   return use_native ? 0 :\n      $.isFunction(fn) ? extensions.push(fn) :\n      typeof fn == 'number' || fn === undefined ? instances[fn || 0] :\n      $(fn).data(\"flowplayer\");\n};\n\n$.extend(flowplayer, {\n\n   version: '5.1.1',\n\n   engine: {},\n\n   conf: {},\n\n   defaults: {\n\n      debug: false,\n\n      // true = forced playback\n      disabled: false,\n\n      // first engine to try\n      engine: 'html5',\n\n      // keyboard shortcuts\n      keyboard: true,\n\n      // default aspect ratio\n      ratio: 9 / 16,\n\n      rtmp: 0,\n\n      splash: false,\n\n      swf: \"http://releases.flowplayer.org/5.1.1/flowplayer.swf\",\n\n      speeds: [0.25, 0.5, 1, 1.5, 2],\n\n      // initial volume level\n      volume: 1,\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#error-codes\n      errors: [\n\n         // video exceptions\n         '',\n         'Video loading aborted',\n         'Network error',\n         'Video not properly encoded',\n         'Video file not found',\n\n         // player exceptions\n         'Unsupported video',\n         'Skin not found',\n         'SWF file not found',\n         'Subtitles not found',\n         'Invalid RTMP URL'\n      ]\n\n   },\n\n   support: {}\n\n});\n\n// smartphones simply use native controls\nif (use_native) {\n   return $(function() { $(\"video\").attr(\"controls\", \"controls\"); });\n}\n\n// jQuery plugin\n$.fn.flowplayer = function(opts, callback) {\n\n   if (typeof opts == 'string') opts = { swf: opts }\n   if ($.isFunction(opts)) { callback = opts; opts = {} }\n\n   return !opts && this.data(\"flowplayer\") || this.each(function() {\n\n      // private variables\n      var root = $(this),\n         conf = $.extend({}, flowplayer.defaults, flowplayer.conf, opts, root.data()),\n         videoTag = $(\"video\", root),\n         lastSeekPosition,\n         initialTypes = [],\n         savedVolume,\n         engine;\n\n\n      /*** API ***/\n      var api = {\n\n         // properties\n         conf: conf,\n         currentSpeed: 1,\n         volumeLevel: conf.volume,\n         video: null,\n\n         // states\n         splash: false,\n         ready: false,\n         paused: false,\n         playing: false,\n         loading: false,\n         muted: false,\n         disabled: false,\n         finished: false,\n\n         // methods\n         load: function(video, callback) {\n\n            if (api.error || api.loading || api.disabled) return;\n\n            root.trigger(\"load\", [api, video, engine]);\n\n            // callback\n            if ($.isFunction(video)) callback = video;\n            if (callback) root.one(\"ready\", callback);\n\n            return api;\n         },\n\n         pause: function(fn) {\n            if (api.ready && !api.seeking && !api.disabled && !api.loading) {\n               engine.pause();\n               api.one(\"pause\", fn);\n            }\n            return api;\n         },\n\n         resume: function() {\n\n            if (api.ready && api.paused && !api.disabled) {\n               engine.resume();\n\n               // Firefox (+others?) does not fire \"resume\" after finish\n               if (api.finished) {\n                  api.trigger(\"resume\");\n                  api.finished = false;\n               }\n            }\n\n            return api;\n         },\n\n         toggle: function() {\n            return api.ready ? api.paused ? api.resume() : api.pause() : api.load();\n         },\n\n         /*\n            seek(1.4)   -> 1.4s time\n            seek(true)  -> 10% forward\n            seek(false) -> 10% backward\n         */\n         seek: function(time, callback) {\n            if (api.ready) {\n\n               if (typeof time == \"boolean\") {\n                  var delta = api.video.duration * 0.1;\n                  time = api.video.time + (time ? delta : -delta);\n               }\n\n               time = lastSeekPosition = Math.min(Math.max(time, 0), api.video.duration);\n               engine.seek(time);\n               if ($.isFunction(callback)) root.one(\"seek\", callback);\n            }\n            return api;\n         },\n\n         /*\n            seekTo(1) -> 10%\n            seekTo(2) -> 20%\n            seekTo(3) -> 30%\n            ...\n            seekTo()  -> last position\n         */\n         seekTo: function(position, fn) {\n            var time = position === undefined ? lastSeekPosition : api.video.duration * 0.1 * position;\n            return api.seek(time, fn);\n         },\n\n         volume: function(level) {\n            if (api.ready && level != api.volumeLevel) engine.volume(Math.min(Math.max(level, 0), 1));\n            return api;\n         },\n\n         speed: function(val, callback) {\n\n            if (api.ready) {\n\n               // increase / decrease\n               if (typeof val == \"boolean\") {\n                  val = conf.speeds[$.inArray(api.currentSpeed, conf.speeds) + (val ? 1 : -1)] || api.currentSpeed;\n               }\n\n               engine.speed(val);\n               if (callback) root.one(\"speed\", callback);\n            }\n\n            return api;\n         },\n\n\n         stop: function() {\n            if (api.ready) engine.stop();\n            return api;\n         },\n\n         unload: function() {\n            if (!root.hasClass(\"is-embedding\")) {\n               if (conf.splash) {\n                  api.trigger(\"unload\");\n                  engine.unload();\n               } else {\n                  api.stop();\n               }\n            }\n            return api;\n         }\n\n      };\n\n      /* togglers */\n      $.each(['disable', 'mute'], function(i, key) {\n         api[key] = function() {\n            return api.trigger(key);\n         };\n      });\n\n      /* event binding / unbinding */\n      $.each(['bind', 'one', 'unbind'], function(i, key) {\n         api[key] = function(type, fn) {\n            root[key](type, fn);\n            return api;\n         };\n      });\n\n      api.trigger = function(event, arg) {\n         root.trigger(event, [api, arg]);\n         return api;\n      };\n\n\n      /*** Behaviour ***/\n\n      root.bind(\"boot\", function() {\n\n         // conf\n         $.each(['autoplay', 'loop', 'preload', 'poster'], function(i, key) {\n            var val = videoTag.attr(key);\n            if (val !== undefined) conf[key] = val ? val : true;\n         });\n\n         // splash\n         if (conf.splash || root.hasClass(\"is-splash\")) {\n            api.splash = conf.splash = conf.autoplay = true;\n            root.addClass(\"is-splash\");\n         }\n\n         if (conf.poster) delete conf.autoplay;\n\n         // extensions\n         $.each(extensions, function(i) {\n            this(api, root);\n         });\n\n         // 1. use the configured engine\n         engine = flowplayer.engine[conf.engine];\n         if (engine) engine = engine(api, root);\n\n         if (engine) {\n            api.engine = conf.engine;\n\n         // 2. failed -> try another\n         } else {\n            delete flowplayer.engine[conf.engine];\n\n            $.each(flowplayer.engine, function(name, impl) {\n               engine = this(api, root);\n               if (engine) api.engine = name;\n               return false;\n            });\n         }\n\n         // no engine\n         if (!engine) return api.trigger(\"error\", { code: 5 });\n\n         // start\n         conf.splash ? api.unload() : api.load();\n\n         // disabled\n         if (conf.disabled) api.disable();\n\n         // initial callback\n         root.one(\"ready\", callback);\n\n         // instances\n         instances.push(api);\n\n\n      }).bind(\"load\", function(e, api, video) {\n\n         // unload others\n         if (conf.splash) {\n            $(\".flowplayer\").filter(\".is-ready, .is-loading\").not(root).each(function() {\n               var api = $(this).data(\"flowplayer\");\n               if (api.conf.splash) api.unload();\n            });\n         }\n\n         // loading\n         api.loading = true;\n\n\n      }).bind(\"ready unload\", function(e) {\n         var ready = e.type == \"ready\";\n         root.toggleClass(\"is-splash\", !ready).toggleClass(\"is-ready\", ready);\n         api.ready = ready;\n         api.splash = !ready;\n\n         function noLoad() {\n            root.removeClass(\"is-loading\");\n            api.loading = false;\n         }\n\n         // load\n         if (ready) {\n            api.volume(conf.volume);\n\n            if (conf.autoplay) {\n               root.one(\"resume\", noLoad);\n\n            } else {\n               if (!api.playing) api.trigger(\"pause\");\n               noLoad();\n            }\n\n         // unload\n         } else {\n            api.video.time = 0;\n            if (conf.splash) videoTag.remove();\n         }\n\n      }).bind(\"mute\", function(e) {\n         var flag = api.muted = !api.muted;\n         if (flag) savedVolume = api.volumeLevel;\n         api.volume(flag ? 0 : savedVolume);\n\n      }).bind(\"speed\", function(e, api, val) {\n         api.currentSpeed = val;\n\n      }).bind(\"volume\", function(e, api, level) {\n         api.volumeLevel = Math.round(level * 100) / 100;\n\n         if (api.muted && api.volumeLevel) {\n            root.removeClass(\"is-muted\");\n            api.muted = false;\n         }\n\n\n      }).bind(\"beforeseek seek\", function(e) {\n         api.seeking = e.type == \"beforeseek\";\n         root.toggleClass(\"is-seeking\", api.seeking);\n\n      }).bind(\"ready pause resume unload finish\", function(e, _api, video) {\n\n         // PAUSED: pause / finish\n         api.paused = /pause|finish|unload/.test(e.type);\n\n         // SHAKY HACK: first-frame / poster / preload=none\n         if (e.type == \"ready\") {\n            if (video) {\n               api.paused = !video.duration || !conf.autoplay && (conf.preload != 'none' || api.engine == 'flash');\n            }\n         }\n\n         // the opposite\n         api.playing = !api.paused;\n\n         // CSS classes\n         root.toggleClass(\"is-paused\", api.paused).toggleClass(\"is-playing\", api.playing);\n\n         // sanity check\n         if (!api.load.ed) api.pause();\n\n      }).bind(\"disable\", function(){\n         api.disabled = !api.disabled;\n\n      }).bind(\"finish\", function(e) {\n         api.finished = true;\n\n      }).bind(\"error\", function() {\n         videoTag.remove();\n      });\n\n      // boot\n      root.trigger(\"boot\", [api, root]).data(\"flowplayer\", api);\n\n   });\n\n};\n\n/* The most minimal Flash embedding */\nvar IS_IE = $.browser.msie;\n\ntry {\n\n   var ver = IS_IE ? new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\").GetVariable('$version') :\n      navigator.plugins[\"Shockwave Flash\"].description;\n\n   ver = ver.split(/\\D+/);\n   if (!IS_IE) ver = ver.slice(1);\n\n   flowplayer.support.flashVideo = ver[0] > 9 || ver[0] == 9 && ver[2] >= 115;\n\n} catch (err) {\n\n}\n\n\n// movie required in opts\nfunction embed(swf, flashvars) {\n\n   window[\"objectId\"] = new Object();\n\n   var id = \"obj\" + (\"\" + Math.random()).slice(2, 15),\n      tag = '<object class=\"fp-engine\" id=\"' + id+ '\" name=\"' + id + '\" ';\n\n   tag += IS_IE ? 'classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\">' :\n      ' data=\"' + swf  + '\" type=\"application/x-shockwave-flash\">';\n\n   var opts = {\n      width: \"100%\",\n      height: \"100%\",\n      allowscriptaccess: \"always\",\n      wmode: \"opaque\",\n      quality: \"high\",\n      flashvars: \"\",\n\n      // https://github.com/flowplayer/flowplayer/issues/13#issuecomment-9369919\n      movie: swf + (IS_IE ? \"?\" + id : \"\"),\n      name: id\n   };\n\n   // flashvars\n   $.each(flashvars, function(key, value) {\n      opts.flashvars += key + \"=\" + value + \"&\";\n   });\n\n   // parameters\n   $.each(opts, function(key, value) {\n      tag += '<param name=\"' + key + '\" value=\"'+ value +'\"/>';\n   });\n\n   tag += \"</object>\";\n\n   return $(tag);\n}\n\n\n// Flash is buggy allover\nif (window.attachEvent) {\n   window.attachEvent(\"onbeforeunload\", function() {\n      __flash_savedUnloadHandler = __flash_unloadHandler = function() {};\n   });\n}\n\n\nflowplayer.engine.flash = function(player, root) {\n\n   var conf = player.conf,\n      video = player.video,\n      callbackId,\n      objectTag,\n      api;\n\n   function pick(sources) {\n      for (var i = 0, source; i < sources.length; i++) {\n         source = sources[i];\n         if (/mp4|flv|flash/.test(source.type)) return source;\n      }\n   }\n\n   // not supported\n   if (!flowplayer.support.flashVideo || !pick(video.sources)) return;\n\n   // ok\n   $(\"video\", root).remove();\n\n   var engine = {\n\n      load: function(video) {\n\n         var source = pick(video.sources);\n         source.url = (conf.rtmp ? source.src : $(\"<a/>\").attr(\"href\", source.src)[0].href)\n            .replace(/&amp;/g, '%26').replace(/&/g, '%26').replace(/=/g, '%3D');\n\n         if (api) {\n            api.__play(source.url);\n\n         } else {\n\n            callbackId = \"fp\" + (\"\" + Math.random()).slice(3, 15);\n\n            var opts = {\n               hostname: conf.embedded ? conf.hostname : top.location.hostname,\n               url: source.url,\n               callback: \"$.\"+ callbackId\n            };\n\n            // optional conf\n            $.each(['key', 'autoplay', 'preload', 'poster', 'rtmp', 'loop', 'debug'], function(i, key) {\n               if (conf[key]) opts[key] = conf[key];\n            });\n\n            if (/^https?:/.test(source.url)) delete opts.rtmp;\n\n            objectTag = embed(conf.swf, opts);\n\n            objectTag.prependTo(root);\n\n            api = objectTag[0];\n\n            // throw error if no loading occurs\n            setTimeout(function() {\n               try {\n                  if (!api.PercentLoaded()) {\n                     return root.trigger(\"error\", [player, { code: 7, url: conf.swf }]);\n                  }\n               } catch (e) {}\n            }, 5000);\n\n            // listen\n            $[callbackId] = function(type, arg) {\n\n               if (conf.debug && type != \"status\") console.log(\"--\", type, arg);\n\n               var event = $.Event(type),\n                  video = player.video;\n\n               switch (type) {\n\n                  // RTMP sends a lot of finish events in vain\n                  // case \"finish\": if (conf.rtmp) return;\n                  case \"ready\": arg = $.extend(video, arg); break;\n                  case \"click\": event.flash = true; break;\n                  case \"keydown\": event.which = arg; break;\n                  case \"buffered\": video.buffered = true; break;\n                  case \"seek\": video.time = arg; break;\n\n                  case \"status\":\n                     if (!video.time || arg.time > video.time) {\n                        video.time = arg.time;\n                        player.trigger(\"progress\", arg.time);\n                     }\n\n                     if (arg.buffer < video.bytes) {\n                        video.buffer = arg.buffer / video.bytes * video.duration;\n                        player.trigger(\"buffer\", video.buffer);\n                     }\n                     break;\n               }\n\n               // add some delay to that player is truly ready after an event\n               setTimeout(function() { player.trigger(event, arg); }, 1)\n\n            };\n\n         }\n\n         return source;\n\n      },\n\n      // not supported yet\n      speed: $.noop,\n\n\n      unload: function() {\n         api && api.__unload();\n         delete $[callbackId];\n         $(\"object\", root).remove();\n         api = 0;\n      }\n\n   };\n\n   $.each(\"pause,resume,seek,volume,stop\".split(\",\"), function(i, name) {\n\n      engine[name] = function(arg) {\n         if (player.ready) {\n\n            if (name == 'seek') {\n\n               // started\n               if (player.video.time) {\n                  player.trigger(\"beforeseek\");\n\n               // not started (TODO: simplify)\n               } else {\n                  engine.resume();\n                  player.seeking = false;\n                  player.trigger(\"resume\");\n                  return;\n               }\n\n            }\n\n            if (arg === undefined) {\n               api[\"__\" + name]();\n\n            } else {\n               api[\"__\" + name](arg);\n            }\n\n         }\n      };\n\n   });\n\n   return engine;\n\n};\n\n\nvar VIDEO = $('<video/>')[0];\n\n   // HTML5 --> Flowplayer event\nvar EVENTS = {\n\n   // fired\n   ended: 'finish',\n   pause: 'pause',\n   play: 'resume',\n   progress: 'buffer',\n   timeupdate: 'progress',\n   volumechange: 'volume',\n   ratechange: 'speed',\n   seeking: 'beforeseek',\n   seeked: 'seek',\n   // abort: 'resume',\n\n   // not fired\n   loadeddata: 'ready',\n   // loadedmetadata: 0,\n   // canplay: 0,\n\n   // error events\n   // load: 0,\n   // emptied: 0,\n   // empty: 0,\n   error: 'error',\n   dataunavailable: 'error'\n\n};\n\nflowplayer.support.video = !!VIDEO.canPlayType;\n\nfunction round(val) {\n   return Math.round(val * 100) / 100;\n}\n\nflowplayer.engine.html5 = function(player, root) {\n\n   var videoTag = $(\"video\", root),\n      track = $(\"track\", videoTag),\n      conf = player.conf,\n      timer,\n      api;\n\n   function canPlay(type) {\n      if (!/video/.test(type)) type = \"video/\" + type;\n      return !!VIDEO.canPlayType(type).replace(\"no\", '');\n   }\n\n   function pick(video) {\n      for (var i = 0, source; i < video.sources.length; i++) {\n         source = video.sources[i];\n         if (canPlay(source.type)) return source;\n      };\n   }\n\n   // not supported\n   if (!flowplayer.support.video || !pick(player.video)) return;\n\n   // ok\n   videoTag.addClass(\"fp-engine\").removeAttr(\"controls\");\n\n   return {\n\n      load: function(video) {\n\n         var source = pick(video);\n\n         if (conf.splash && !api) {\n            videoTag = $(\"<video/>\", {\n               src: source.src,\n               type: 'video/' + source.type,\n               autoplay: 'autoplay',\n               'class': 'fp-engine'\n            }).prependTo(root);\n\n            if (track.length) videoTag.append(track.attr(\"default\", \"\"));\n\n            if (conf.loop) videoTag.attr(\"loop\", \"loop\");\n\n            api = videoTag[0];\n\n         } else {\n            api = videoTag[0];\n\n            // change of clip\n            if (video.src && api.src != video.src) {\n               videoTag.attr(\"autoplay\", \"autoplay\");\n               api.src = source.src;\n               api.load();\n            }\n         }\n\n         // no events fired when preload=none\n         if (conf.preload == 'none') root.trigger(\"ready\", [player, {}]);\n\n         listen(api, $(\"source\", videoTag));\n\n         return source;\n      },\n\n      pause: function() {\n         api.pause();\n      },\n\n      resume: function() {\n         api.play();\n      },\n\n      speed: function(val) {\n         api.playbackRate = val;\n      },\n\n      seek: function(time) {\n         try {\n            api.currentTime = time;\n         } catch (ignored) {}\n      },\n\n      // seek(0) && pause() && display poster\n      stop: function() {\n         api.currentTime = 0;\n         setTimeout(function() { api.load(); }, 100);\n      },\n\n      volume: function(level) {\n         api.volume = level;\n      },\n\n      unload: function() {\n         $(\"video\", root).remove();\n         api = 0;\n         clearInterval(timer);\n      }\n\n   };\n\n   function listen(api, sources) {\n\n      // listen only once\n      if (api.listening) return; api.listening = true;\n\n      sources.bind(\"error\", function(e) {\n         if (canPlay($(e.target).attr(\"type\"))) {\n            player.trigger(\"error\", { code: 4 });\n         }\n      });\n\n      $.each(EVENTS, function(type, flow) {\n\n        api.addEventListener(type, function(e) {\n\n            // safari hack for bad URL\n            if (flow == \"progress\" && e.srcElement && e.srcElement.readyState === 0) {\n               setTimeout(function() {\n                  if (!player.video.duration) {\n                     flow = \"error\";\n                     player.trigger(flow, { code: 4 });\n                  }\n               }, 500);\n            }\n\n            if (conf.debug && !/progress/.test(flow)) console.log(type, \"->\", flow, e);\n\n            // no events if player not ready\n            if (!player.ready && !/ready|error/.test(flow) || !flow) { return; }\n\n            var event = $.Event(flow), video = player.video, arg;\n\n            switch (flow) {\n\n               case \"ready\":\n\n                  arg = $.extend(video, {\n                     duration: api.duration,\n                     width: api.videoWidth,\n                     height: api.videoHeight,\n                     url: api.currentSrc\n                  });\n\n                  try {\n                     video.seekable = api.seekable && api.seekable.end(null);\n\n                  } catch (ignored) {}\n\n                  // buffer\n                  timer = timer || setInterval(function() {\n\n                     try {\n                        video.buffer = api.buffered.end(null);\n\n                     } catch (ignored) {}\n\n                     if (video.buffer) {\n                        if (video.buffer < video.duration) {\n                           player.trigger(\"buffer\", e);\n\n                        } else if (!video.buffered) {\n                           video.buffered = true;\n                           player.trigger(\"buffer\", e).trigger(\"buffered\", e);\n                           clearInterval(timer);\n                           timer = 0;\n                        }\n                     }\n\n                  }, 250);\n\n                  break;\n\n               case \"progress\": case \"seek\":\n                  // Safari can give negative times. add rounding\n                  arg = video.time = Math.max(api.currentTime, 0);\n                  break;\n\n               case \"speed\":\n                  arg = round(api.playbackRate);\n                  break;\n\n               case \"volume\":\n                  arg = round(api.volume);\n                  break;\n\n               case \"error\":\n                  arg = (e.srcElement || e.originalTarget).error;\n            }\n\n            player.trigger(event, arg);\n\n         }, false);\n\n      });\n\n   }\n\n};\nvar TYPE_RE = /.(\\w{3,4})$/i;\n\nfunction parseSource(el) {\n   var type = el.attr(\"type\"), src = el.attr(\"src\");\n   return { src: src, type: type ? type.replace(\"video/\", \"\") : src.split(TYPE_RE)[1] };\n}\n\n/* Resolves video object from initial configuration and from load() method */\nflowplayer(function(api, root) {\n\n   var videoTag = $(\"video\", root),\n      initialSources = [];\n\n   // initial video\n   $(\"source\", videoTag).each(function() {\n      initialSources.push(parseSource($(this)));\n   });\n\n   if (!initialSources.length) initialSources.push(parseSource(videoTag));\n\n   api.video = { sources: initialSources };\n\n   // a new video is loaded\n   api.bind(\"load\", function(e, api, video, engine) {\n\n      video = video || api.video;\n\n      if ($.isArray(video)) {\n\n         video = { sources: $.map(video, function(el) {\n            var type = Object.keys(el)[0];\n            el.type = type;\n            el.src = el[type];\n            delete el[type];\n            return el;\n         })};\n\n      } else if (typeof video == 'string') {\n\n         video = { src: video, sources: [] };\n\n         $.each(initialSources, function(i, source) {\n            if (source.type != 'flash') {\n               video.sources.push({\n                  type: source.type,\n                  src: video.src.replace(TYPE_RE, \"\") + \".\" + source.type\n               });\n            }\n         });\n\n      }\n\n      api.video = $.extend(video, engine.load(video));\n\n   });\n\n});\n/* A minimal jQuery Slider plugin with all goodies */\n\n// skip IE policies\n// document.ondragstart = function () { return false; };\n\n\n// execute function every <delay> ms\n$.throttle = function(fn, delay) {\n   var locked;\n\n   return function () {\n      if (!locked) {\n         fn.apply(this, arguments);\n         locked = 1;\n         setTimeout(function () { locked = 0; }, delay);\n      }\n   };\n};\n\n\n$.fn.slider2 = function() {\n\n   return this.each(function() {\n\n      var root = $(this),\n         doc = $(document),\n         progress = root.children(\":last\"),\n         disabled,\n         offset,\n         width,\n         height,\n         vertical,\n         size,\n         maxValue,\n         max,\n\n         /* private */\n         calc = function() {\n            offset = root.offset();\n            width = root.width();\n            height = root.height();\n\n            /* exit from fullscreen can mess this up.*/\n            // vertical = height > width;\n\n            size = vertical ? height : width;\n            max = toDelta(maxValue);\n         },\n\n         fire = function(value) {\n            if (!disabled && value != api.value && (!maxValue || value < maxValue)) {\n               root.trigger(\"slide\", [ value ]);\n               api.value = value;\n            }\n         },\n\n         mousemove = function(e) {\n            var delta = vertical ? e.pageY - offset.top : e.pageX - offset.left;\n            delta = Math.max(0, Math.min(max || size, delta));\n\n            var value = delta / size;\n            if (vertical) value = 1 - value;\n            return move(value, 0, true);\n         },\n\n         move = function(value, speed) {\n            if (speed === undefined) { speed = 0; }\n            var to = (value * 100) + \"%\";\n\n            if (!maxValue || value <= maxValue)\n               progress.stop().animate(vertical ? { height: to } : { width: to }, speed, \"linear\");\n\n            return value;\n         },\n\n         toDelta = function(value) {\n            return Math.max(0, Math.min(size, vertical ? (1 - value) * height : value * width));\n         },\n\n         /* public */\n         api = {\n\n            max: function(value) {\n               maxValue = value;\n            },\n\n            disable: function(flag) {\n               disabled = flag;\n            },\n\n            slide: function(value, speed, fireEvent) {\n               calc();\n               if (fireEvent) fire(value);\n\n               move(value, speed);\n            }\n\n         };\n\n      calc();\n\n      // bound dragging into document\n      root.data(\"api\", api).bind(\"mousedown.sld\", function(e) {\n\n         e.preventDefault();\n\n         if (!disabled) {\n\n            // begin --> recalculate. allows dynamic resizing of the slider\n            var delayedFire = $.throttle(fire, 100);\n            calc();\n            api.dragging = true;\n            fire(mousemove(e));\n\n            doc.bind(\"mousemove.sld\", function(e) {\n               e.preventDefault();\n               delayedFire(mousemove(e));\n\n            }).one(\"mouseup\", function() {\n               api.dragging = false;\n               doc.unbind(\"mousemove.sld\");\n            });\n\n         }\n\n      });\n\n   });\n\n};\n\nfunction zeropad(val) {\n   val = parseInt(val, 10);\n   return val >= 10 ? val : \"0\" + val;\n}\n\n// display seconds in hh:mm:ss format\nfunction format(sec) {\n\n   sec = sec || 0;\n\n   var h = Math.floor(sec / 3600),\n       min = Math.floor(sec / 60);\n\n   sec = sec - (min * 60);\n\n   if (h >= 1) {\n      min -= h * 60;\n      return h + \"h:\" + zeropad(min); // + \":\" + zeropad(sec);\n   }\n\n   return zeropad(min) + \":\" + zeropad(sec);\n}\n\n\n// detect animation support\nflowplayer.support.animation = (function() {\n   var vendors = ['','Webkit','Moz','O','ms','Khtml'], el = $(\"<p/>\")[0];\n\n   for (var i = 0; i < vendors.length; i++) {\n      if (el.style[vendors[i] + 'AnimationName'] !== 'undefined') return true;\n   }\n})();\n\n\nflowplayer(function(api, root) {\n\n   var conf = api.conf,\n      hovertimer;\n\n   root.addClass(\"flowplayer is-mouseout\").append('\\\n      <div class=\"ratio\"/>\\\n      <div class=\"ui\">\\\n         <div class=\"waiting\"><em/><em/><em/></div>\\\n         <a class=\"fullscreen\"/>\\\n         <a class=\"unload\"/>\\\n         <p class=\"speed\"/>\\\n         <div class=\"controls\">\\\n            <div class=\"timeline\">\\\n               <div class=\"buffer\"/>\\\n               <div class=\"progress\"/>\\\n            </div>\\\n            <div class=\"volume\">\\\n               <a class=\"mute\"></a>\\\n               <div class=\"volumeslider\">\\\n                  <div class=\"volumelevel\"/>\\\n               </div>\\\n            </div>\\\n         </div>\\\n         <div class=\"time\">\\\n            <em class=\"elapsed\">00:00</em>\\\n            <em class=\"remaining\"/>\\\n            <em class=\"duration\">99:99</em>\\\n         </div>\\\n         <div class=\"message\"><h2/><p/></div>\\\n      </div>'.replace(/class=\"/g, 'class=\"fp-')\n   );\n\n   function find(klass) {\n      return $(\".fp-\" + klass, root);\n   }\n\n   // widgets\n   var progress = find(\"progress\"),\n      buffer = find(\"buffer\"),\n      elapsed = find(\"elapsed\"),\n      remaining = find(\"remaining\"),\n      waiting = find(\"waiting\"),\n      ratio = find(\"ratio\"),\n      speed = find(\"speed\"),\n      origRatio = ratio.css(\"paddingTop\"),\n\n      // sliders\n      timeline = find(\"timeline\").slider2(),\n      timelineApi = timeline.data(\"api\"),\n\n      volume = find(\"volume\"),\n      fullscreen = find(\"fullscreen\"),\n      volumeSlider = find(\"volumeslider\").slider2(),\n      volumeApi = volumeSlider.data(\"api\"),\n      noToggle = root.hasClass(\"no-toggle\");\n\n   // aspect ratio\n   function setRatio(val) {\n      if (!parseInt(origRatio, 10))\n         ratio.css(\"paddingTop\", val * 100 + \"%\");\n\n      // no inline-block support. sorry; no feature detection\n      if ($.browser.msie && $.browser.version < 8) {\n         $(\"object\", root).height(root.height());\n      }\n\n   }\n\n   function hover(flag) {\n      root.toggleClass(\"is-mouseover\", flag).toggleClass(\"is-mouseout\", !flag);\n   }\n\n   // loading...\n   if (!flowplayer.support.animation) waiting.html(\"<p>loading &hellip;</p>\");\n\n   setRatio(conf.ratio);\n\n   if (noToggle) root.addClass(\"is-mouseover\");\n\n   // no fullscreen in IFRAME\n   try {\n      if (window != window.top) fullscreen.remove();\n\n   } catch (e) {\n      fullscreen.remove();\n   }\n\n\n   api.bind(\"ready\", function() {\n\n      var dur = api.video.duration;\n\n      timelineApi.disable(!dur);\n\n      setRatio(api.video.videoHeight / api.video.videoWidth);\n\n      // initial time & volume\n      find(\"duration\").add(remaining).html(format(dur));\n      volumeApi.slide(api.volumeLevel);\n\n\n   }).bind(\"unload\", function() {\n      if (!origRatio) ratio.css(\"paddingTop\", \"\");\n\n   // buffer\n   }).bind(\"buffer\", function() {\n      var video = api.video,\n         max = video.buffer / video.duration;\n\n      if (!video.seekable) timelineApi.max(max);\n\n      buffer.animate({ width: (max * 100) + \"%\"}, 250, \"linear\");\n\n   }).bind(\"speed\", function(e, api, val) {\n      speed.text(val + \"x\").addClass(\"fp-hilite\");\n      setTimeout(function() { speed.removeClass(\"fp-hilite\") }, 1000);\n\n   }).bind(\"buffered\", function() {\n      buffer.css({ width: '100%' });\n      timelineApi.max(1);\n\n   // progress\n   }).bind(\"progress\", function() {\n\n      var time = api.video.time,\n         duration = api.video.duration;\n\n      if (!timelineApi.dragging || typeof Touch == 'object') {\n         timelineApi.slide(time / duration, api.seeking ? 0 : 250);\n      }\n\n      elapsed.html(format(time));\n      remaining.html(\"-\" + format(duration - time));\n\n   }).bind(\"finish resume seek\", function(e) {\n      root.toggleClass(\"is-finished\", e.type == \"finish\");\n\n   }).bind(\"finish\", function() {\n      elapsed.html(format(api.video.duration));\n      window.foo = timelineApi;\n      timelineApi.slide(1, 100);\n\n   // misc\n   }).bind(\"beforeseek\", function() {\n\n      progress.stop();\n\n\n   }).bind(\"volume\", function() {\n      volumeApi.slide(api.volumeLevel);\n\n\n   }).bind(\"disable\", function() {\n      var flag = api.disabled;\n      timelineApi.disable(flag);\n      volumeApi.disable(flag);\n      root.toggleClass(\"is-disabled\", api.disabled);\n\n   }).bind(\"mute\", function() {\n      root.toggleClass(\"is-muted\", api.muted);\n\n   }).bind(\"error\", function(e, api, error) {\n      root.removeClass(\"is-loading\").addClass(\"is-error\");\n\n      if (error) {\n         error.message = conf.errors[error.code];\n         api.error = true;\n\n         var el = $(\".fp-message\", root);\n         $(\"h2\", el).text(api.engine + \": \" + error.message);\n         $(\"p\", el).text(error.url || api.video.url || api.video.src);\n         root.unbind(\"mouseenter click\").removeClass(\"is-mouseover\");\n      }\n\n\n   // hover\n   }).bind(\"mouseenter mouseleave\", function(e) {\n      if (noToggle) return;\n\n      var is_over = e.type == \"mouseenter\",\n         lastMove;\n\n      // is-mouseover/out\n      hover(is_over);\n\n      if (is_over) {\n\n         root.bind(\"pause.x mousemove.x volume.x\", function() {\n            hover(true);\n            lastMove = new Date;\n         });\n\n         hovertimer = setInterval(function() {\n            if (new Date - lastMove > 5000) {\n               hover(false)\n               lastMove = new Date;\n            }\n         }, 100);\n\n      } else {\n         root.unbind(\".x\");\n         clearInterval(hovertimer);\n      }\n\n\n   // allow dragging over the player edge\n   }).bind(\"mouseleave\", function() {\n\n      if (timelineApi.dragging || volumeApi.dragging) {\n         root.addClass(\"is-mouseover\").removeClass(\"is-mouseout\");\n      }\n\n   // click\n   }).bind(\"click.player\", function(e) {\n      if ($(e.target).is(\".fp-ui, .fp-engine\") || e.flash || e.force) {\n         e.preventDefault();\n         return api.toggle();\n      }\n   });\n\n   $(\".fp-toggle\", root).click(api.toggle);\n\n   /* controlbar elements */\n   $.each(['mute', 'fullscreen', 'unload'], function(i, key) {\n      find(key).click(function() {\n         api[key]();\n      });\n   });\n\n   timeline.bind(\"slide\", function(e, val) {\n      api.seeking = true;\n      api.seek(val * api.video.duration);\n   });\n\n   volumeSlider.bind(\"slide\", function(e, val) {\n      api.volume(val);\n   });\n\n   // times\n   find(\"time\").click(function(e) {\n      $(this).toggleClass(\"is-inverted\");\n   });\n\n   hover(false);\n\n});\n\nvar focused,\n   focusedRoot,\n   IS_HELP = \"is-help\";\n\n // keyboard. single global listener\n$(document).bind(\"keydown.fp\", function(e) {\n\n   if (!focused || !focused.conf.keyboard) return;\n\n   var el = focused,\n      metaKeyPressed = e.ctrlKey || e.metaKey || e.altKey,\n      key = e.which;\n\n   // help dialog (shift key not truly required)\n   if ($.inArray(key, [63, 187, 191, 219]) != -1) {\n      focusedRoot.toggleClass(IS_HELP);\n      return false;\n   }\n\n   // close help\n   if (key == 27 && focusedRoot.hasClass(IS_HELP)) {\n      focusedRoot.toggleClass(IS_HELP);\n      return false;\n   }\n\n   if (!metaKeyPressed && el.ready) {\n\n      e.preventDefault();\n\n      // slow motion / fast forward\n      if (e.shiftKey) {\n         if (key == 39) el.speed(true);\n         else if (key == 37) el.speed(false);\n         return;\n      }\n\n      // 1, 2, 3, 4 ..\n      if (key < 58 && key > 47) return el.seekTo(key - 48);\n\n      switch (key) {\n         case 38: case 75: el.volume(el.volumeLevel + 0.15); break;        // volume up\n         case 40: case 74: el.volume(el.volumeLevel - 0.15); break;        // volume down\n         case 39: case 76: el.seeking = true; el.seek(true); break;        // forward\n         case 37: case 72: el.seeking = true; el.seek(false); break;       // backward\n         case 190: el.seekTo(); break;                                     // to last seek position\n         case 32: el.toggle(); break;                                      // spacebar\n         case 70: el.fullscreen(); break;                                  // toggle fullscreen\n         case 77: el.mute(); break;                                        // mute\n         case 27: el[el.isFullscreen ? 'fullscreen' : 'unload'](); break;  // esc\n      }\n\n   }\n\n});\n\nflowplayer(function(api, root) {\n\n   // no keyboard configured\n   if (!api.conf.keyboard) return;\n\n   // hover\n   root.bind(\"mouseenter mouseleave\", function(e) {\n      focused = !api.disabled && e.type == 'mouseenter' ? api : 0;\n      if (focused) focusedRoot = root;\n   });\n\n   // TODO: add to player-layout.html\n   root.append('\\\n      <div class=\"fp-help\">\\\n         <a class=\"fp-close\"></a>\\\n         <div class=\"fp-help-section fp-help-basics\">\\\n            <p><em>space</em>play / pause</p>\\\n            <p><em>esc</em>stop</p>\\\n            <p><em>f</em>fullscreen</p>\\\n            <p><em>shift</em> + <em>&#8592;</em><em>&#8594;</em>slower / faster</p>\\\n         </div>\\\n         <div class=\"fp-help-section\">\\\n            <p><em>&#8593;</em><em>&#8595;</em>volume</p>\\\n            <p><em>m</em>mute</p>\\\n         </div>\\\n         <div class=\"fp-help-section\">\\\n            <p><em>&#8592;</em><em>&#8594;</em>seek</p>\\\n            <p><em>&nbsp;. </em>seek to previous\\\n            </p><p><em>1</em><em>2</em>&hellip;<em>6</em> seek to 10%, 20%, &hellip;60% </p>\\\n         </div>\\\n      </div>\\\n   ');\n\n   api.bind(\"ready unload\", function(e) {\n      $(\".fp-ui\", root).attr(\"title\", e.type == \"ready\" ? \"Hit ? for help\" : \"\");\n   });\n\n   $(\".fp-close\", root).click(function() {\n      root.toggleClass(IS_HELP);\n   });\n\n});\n\nvar VENDOR = $.browser.mozilla ? \"moz\": \"webkit\",\n   FS_ENTER = \"fullscreen\",\n   FS_EXIT = \"fullscreen-exit\",\n   FULL_PLAYER,\n   FS_SUPPORT = typeof document.webkitCancelFullScreen == 'function' || document.mozFullScreenEnabled;\n\n// detect native fullscreen support\n\nflowplayer.support.fullscreen = FS_SUPPORT;\n\n\n// esc button\n$(document).bind(VENDOR + \"fullscreenchange\", function(e) {\n   var el = $(document.webkitCurrentFullScreenElement || document.mozFullScreenElement);\n\n   if (el.length) {\n      FULL_PLAYER = el.trigger(FS_ENTER, [el]);\n   } else {\n      FULL_PLAYER.trigger(FS_EXIT, [FULL_PLAYER]);\n   }\n\n});\n\n\nflowplayer(function(player, root) {\n\n   player.isFullscreen = false;\n\n   player.fullscreen = function(flag) {\n\n      if (flag === undefined) flag = !player.isFullscreen;\n\n      if (FS_SUPPORT) {\n\n         if (flag) {\n            root[0][VENDOR + 'RequestFullScreen'](Element.ALLOW_KEYBOARD_INPUT);\n         } else {\n            document[VENDOR + 'CancelFullScreen']();\n         }\n\n      } else {\n         player.trigger(flag ? FS_ENTER : FS_EXIT, [player])\n      }\n\n      return player;\n   };\n\n   player.bind(FS_ENTER, function(e) {\n      root.addClass(\"is-fullscreen\");\n      player.isFullscreen = true;\n\n   }).bind(FS_EXIT, function(e) {\n      root.removeClass(\"is-fullscreen\");\n      player.isFullscreen = false;\n   });\n\n   var origH = root.height(),\n      origW = root.width();\n\n   // handle Flash object aspect ratio on fullscreen\n   player.bind(\"fullscreen\", function() {\n\n      var screenW = FS_SUPPORT ? screen.width : $(window).width(),\n         screenH = FS_SUPPORT ? screen.height : $(window).height(),\n         ratio = player.video.height / player.video.width,\n         dim = ratio > 0.5 ? screenH * (1 / ratio) : screenW * ratio;\n\n      $(\"object\", root).css(ratio > 0.5 ?\n         { width: dim, marginLeft: (screenW - dim) / 2, height: '100%' } :\n         { height: dim, marginTop: (screenH - dim - 20) / 2, width: '100%' }\n      );\n\n\n   }).bind(\"fullscreen-exit\", function() {\n      var ie7 = $.browser.msie && $.browser.version < 8,\n         ratio = player.video.height / player.video.width;\n\n      $(\"object\", root).css(ratio > 0.5 ?\n         { width: ie7 ? origW : '', height: ie7 ? origH : '', marginLeft: '' } :\n         { height: ie7 ? origH : '', width: ie7 ? origW : '', marginTop: '' }\n      );\n\n   });\n\n});\n\n\nflowplayer(function(player, root) {\n\n   var conf = $.extend({ active: 'is-active', advance: true, query: \".fp-playlist a\" }, player.conf),\n      klass = conf.active;\n\n   // getters\n   function els() {\n      return $(conf.query, root);\n   }\n\n   function active() {\n      return $(conf.query + \".\" + klass, root);\n   }\n\n   // click -> play\n   var items = els().live(\"click\", function(e) {\n      var el = $(this);\n      el.is(\".\" + klass) ? player.toggle() : player.load(el.attr(\"href\"));\n      e.preventDefault();\n   });\n\n   player.play = function(i) {\n      if (i === undefined) player.resume();\n      else if (typeof i != 'number') player.load.apply(null, arguments);\n      else els().eq(i).click();\n      return player;\n   };\n\n   if (items.length) {\n\n      // disable single clip looping\n      player.conf.loop = false;\n\n      // playlist wide cuepoint support\n      var has_cuepoints = items.filter(\"[data-cuepoints]\").length;\n\n      // highlight\n      player.bind(\"load\", function() {\n\n         // active\n         var prev = active().removeClass(klass),\n            el = $(\"a[href*='\" + player.video.src.replace(TYPE_RE, \"\") + \"']\", root).addClass(klass),\n            clips = els(),\n            index = clips.index(el),\n            is_last = index == clips.length - 1;\n\n         // index\n         root.removeClass(\"video\" + clips.index(prev)).addClass(\"video\" + index).toggleClass(\"last-video\", is_last);\n\n         // video properties\n         player.video.index = index;\n         player.video.is_last = is_last;\n\n         // cuepoints\n         if (has_cuepoints) player.cuepoints = el.data(\"cuepoints\");\n\n\n      // without namespace callback called only once. unknown rason.\n      }).bind(\"unload.pl\", function() {\n         active().toggleClass(klass);\n\n      });\n\n      // api.next() / api.prev()\n      $.each(['next', 'prev'], function(i, key) {\n\n         player[key] = function(e) {\n            e && e.preventDefault();\n\n            // next (or previous) entry\n            var el = active()[key]();\n\n            // cycle\n            if (!el.length) el = els().filter(key == 'next' ? ':first' : ':last');;\n\n            el.click();\n         };\n\n         $(\".fp-\" + key, root).click(player[key]);\n      });\n\n      if (conf.advance) {\n         root.unbind(\"finish.pl\").bind(\"finish.pl\", function() {\n            root.addClass(\"is-playing\"); // hide play button\n\n            // next clip is found or loop\n            if (active().next().length || conf.loop) {\n               player.next();\n\n            // stop to last clip, play button starts from 1:st clip\n            } else {\n               player.one(\"resume\", function() {\n                  player.next();\n                  return false;\n               });\n            }\n         });\n      }\n\n   }\n\n\n});\n\nvar CUE_RE = / ?cue\\d+ ?/;\n\nflowplayer(function(player, root) {\n\n   var lastTime = 0;\n\n   player.cuepoints = player.conf.cuepoints || [];\n\n   function setClass(index) {\n      root[0].className = root[0].className.replace(CUE_RE, \" \");\n      if (index >= 0) root.addClass(\"cue\" + index);\n   }\n\n   player.bind(\"progress\", function(e, api, time) {\n\n      // avoid throwing multiple times\n      if (lastTime && time - lastTime < 0.015) return lastTime = time;\n      lastTime = time;\n\n      var cues = player.cuepoints || [];\n\n      for (var i = 0, cue; i < cues.length; i++) {\n\n         cue = cues[i];\n         if (1 * cue) cue = { time: cue }\n         if (cue.time < 0) cue.time = player.video.duration + cue.time;\n         cue.index = i;\n\n         // progress_interval / 2 = 0.125\n         if (Math.abs(cue.time - time) < 0.125) {\n            setClass(i);\n            root.trigger(\"cuepoint\", [player, cue]);\n         }\n\n      }\n\n   // no CSS class name\n   }).bind(\"unload seek\", setClass);\n\n   if (player.conf.generate_cuepoints) {\n\n      player.bind(\"ready\", function() {\n\n         var cues = player.cuepoints || [],\n            duration = player.video.duration,\n            timeline = $(\".fp-timeline\", root).css(\"overflow\", \"visible\");\n\n         $.each(cues, function(i, cue) {\n\n            var time = cue.time || cue;\n            if (time < 0) time = duration + cue;\n\n            var el = $(\"<a/>\").addClass(\"fp-cuepoint fp-cuepoint\" + i)\n               .css(\"left\", (time / duration * 100) + \"%\");\n\n            el.appendTo(timeline).mousedown(function() {\n               player.seek(time);\n\n               // preventDefault() doesn't work\n               return false;\n            });\n\n         });\n\n      });\n\n   }\n\n});\nvar TRACK_EL = $(\"<track/>\")[0];\n\nflowplayer.support.subtitles = !!TRACK_EL.track;\n\n// TODO: remove in 6.0\n$.extend($.support, flowplayer.support);\n\n\nflowplayer(function(player, root, engine) {\n\n   var track = $(\"track\", root),\n      conf = player.conf;\n\n   if (flowplayer.support.subtitles) {\n\n      player.subtitles = track.length && track[0].track;\n\n      // use native when supported\n      if (conf.nativesubtitles && conf.engine == 'html5') return;\n   }\n\n   // avoid duplicate loads\n   track.remove();\n\n   // Thanks: https://github.com/delphiki/Playr/blob/master/playr.js#L569\n   var TIMECODE_RE = /^([0-9]{2}:[0-9]{2}:[0-9]{2}[,.]{1}[0-9]{3}) --\\> ([0-9]{2}:[0-9]{2}:[0-9]{2}[,.]{1}[0-9]{3})(.*)/;\n\n   function seconds(timecode) {\n      var els = timecode.split(':');\n      return els[0] * 60 * 60 + els[1] * 60 + parseFloat(els[2].replace(',','.'));\n   }\n\n   player.subtitles = [];\n\n   var url = track.attr(\"src\");\n\n   $.get(url, function(txt) {\n\n      for (var i = 0, lines = txt.split(\"\\n\"), len = lines.length, entry = {}, title, timecode, text, cue; i < len; i++) {\n\n         timecode = TIMECODE_RE.exec(lines[i]);\n\n         if (timecode) {\n\n            // title\n            title = lines[i - 1];\n\n            // text\n            text = \"<p>\" + lines[++i] + \"</p><br/>\";\n            while ($.trim(lines[++i]) && i < lines.length) text +=  \"<p>\" + lines[i] + \"</p><br/>\";\n\n            // entry\n            entry = {\n               title: title,\n               startTime: seconds(timecode[1]),\n               endTime: seconds(timecode[2]),\n               text: text\n            };\n\n            cue = { time: entry.startTime, subtitle: entry };\n\n            player.subtitles.push(entry);\n            player.cuepoints.push(cue);\n            player.cuepoints.push({ time: entry.endTime, subtitleEnd: title });\n\n            // initial cuepoint\n            if (entry.startTime === 0) {\n               player.trigger(\"cuepoint\", cue);\n            }\n\n         }\n\n      }\n\n   }).fail(function() {\n      player.trigger(\"error\", {code: 8, url: url });\n      return false;\n   });\n\n   var wrap = $(\"<div class='fp-subtitle'/>\", root).appendTo(root),\n      currentPoint;\n\n   player.bind(\"cuepoint\", function(e, api, cue) {\n\n      if (cue.subtitle) {\n         currentPoint = cue.index;\n         wrap.html(cue.subtitle.text).addClass(\"fp-active\");\n\n      } else if (cue.subtitleEnd) {\n         wrap.removeClass(\"fp-active\");\n      }\n\n   }).bind(\"seek\", function() {\n\n      var time = player.video.time;\n\n      $.each(player.cuepoints || [], function(i, cue) {\n         var entry = cue.subtitle;\n\n         if (entry && currentPoint != cue.index) {\n            if (time >= cue.time && time <= entry.endTime) player.trigger(\"cuepoint\", cue);\n            else wrap.removeClass(\"fp-active\");\n         }\n\n      });\n\n   });\n\n});\n\n\n\nflowplayer(function(player, root) {\n\n   var id = player.conf.analytics, time = 0, last = 0;\n\n   if (id && typeof _gat !== 'undefined') {\n\n      function track(e) {\n\n         if (time) {\n            var tracker = _gat._getTracker(id),\n               video = player.video;\n\n            tracker._setAllowLinker(true);\n\n            // http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html\n            tracker._trackEvent(\n               \"Video / Seconds played\",\n               player.engine + \"/\" + video.type,\n               root.attr(\"title\") || video.src.split(\"/\").slice(-1)[0].replace(TYPE_RE, ''),\n               Math.round(time / 1000)\n            );\n\n            time = 0;\n\n         }\n\n      }\n\n      player.bind(\"load unload\", track).bind(\"progress\", function() {\n\n         if (!player.seeking) {\n            time += last ? (+new Date - last) : 0;\n            last = +new Date;\n         }\n\n      }).bind(\"pause\", function() {\n         last = 0;\n      });\n\n      $(window).unload(track);\n\n   }\n\n});\n/*\n   Bunch of hacks to gain mobile WebKit support. Main shortomings include:\n\n   1. cannot insert video tag dynamically -> splash screen is tricky / hack\n   2. autoplay not supported\n\n   Both of these issues cannot be feature detected. More issues can be found here:\n\n   http://blog.millermedeiros.com/2011/03/html5-video-issues-on-the-ipad-and-how-to-solve-them/\n*/\n\nif (/iPad|MeeGo/.test(UA)) {\n\n   // Warning: This is a hack!. iPad is the new IE for developers.\n\n   flowplayer(function(player, root) {\n\n      // custom loaded event\n      var conf = player.conf,\n         loaded;\n\n      conf.autoplay = player.splash = conf.splash = false;\n\n      // old generation fix\n      if (/Version\\/5/.test(UA)) conf.preload = \"none\";\n\n\n      if (conf.native_ipad_fullscreen) {\n         player.fullscreen = function() {\n           $('video', root)[0].webkitEnterFullScreen();\n         }\n      }\n\n      root.bind(\"load\", function() {\n         var video = $('video', root)[0],\n            poster = $(video).attr('poster'),\n            autoplay = $(video).attr('autoplay');\n\n         // poster fix\n         if (poster && !autoplay) {\n           root.css('background', 'url(' + poster + ') center no-repeat');\n           root.css('background-size', 'contain');\n         }\n\n         root.addClass(\"is-ipad is-paused\").removeClass(\"is-loading\");\n         player.ready = player.paused = true;\n         player.loading = false;\n\n         if (autoplay) player.resume();\n\n         // fake ready event on start\n         video.addEventListener(\"canplay\", function(e) {\n            root.trigger(\"ready\").trigger(\"resume\");\n         }, false);\n\n      });\n\n      // force playback start with a first click\n      root.bind(\"touchstart\", function(e) {\n\n         if (!loaded) {\n            root.triggerHandler({ type: 'click.player', force: true });\n            loaded = true;\n         }\n\n         // fake mouseover effect with click\n         if (player.playing && !root.hasClass(\"is-mouseover\")) {\n            root.addClass(\"is-mouseover\");\n            return false;\n         }\n\n      });\n\n\n      player.unload = function() {\n         player.pause();\n         root.trigger(\"unload\");\n         loaded = false;\n      };\n\n   });\n\n}\nif (/Android/.test(navigator.userAgent)) {\n  flowplayer(function(player, root) {\n\n    // custom loaded event\n    var loaded;\n\n    player.splash = player.conf.splash = false;\n    player.conf.autoplay = false;\n    \n    //Setup fullscreen\n    var video = $('video', root)[0];\n    player.fullscreen = function() {\n      video.webkitEnterFullScreen();\n    }\n\n    root.bind(\"load\", function() {\n      root.addClass(\"is-paused\").removeClass(\"is-loading\");\n      player.ready = player.paused = true;\n      player.loading = false;\n      \n      var handleVideoDurationOnTimeUpdate = function() { // Android browser gives video.duration == 1 until second 'timeupdate' event fired\n        if (video.duration != 1) {\n          player.video.duration = video.duration;\n          $('.fp-duration', root).html(format(video.duration));\n          video.removeEventListener('timeupdate', handleVideoDurationOnTimeUpdate);\n        }\n      };\n      video.addEventListener('timeupdate', handleVideoDurationOnTimeUpdate);\n    });\n    \n    // force playback start with a first click\n    root.bind(\"touchstart\", function(e) {\n      if (!loaded) {\n        root.triggerHandler(\"click.player\");\n        loaded = true;\n      }\n      // fake mouseover effect with click\n      if (player.playing && !root.hasClass(\"is-mouseover\")) {\n        root.addClass(\"is-mouseover\");\n        return false;\n      }\n    });\n\n    player.unload = function() {\n      player.pause();\n      root.trigger(\"unload\");\n      loaded = false;\n    };\n  });\n}\n\nflowplayer(function(player, root) {\n\n   // no embedding\n   if (player.conf.embed === false) return;\n\n   var conf = player.conf,\n      ui = $(\".fp-ui\", root),\n      trigger = $(\"<a/>\", { \"class\": \"fp-embed\", title: 'Copy to your site'}).appendTo(ui),\n      target = $(\"<div/>\", { 'class': 'fp-embed-code'})\n         .append(\"<label>Paste this HTML code on your site to embed.</label><textarea/>\").appendTo(ui),\n      area = $(\"textarea\", target);\n\n   player.embedCode = function() {\n\n      var video = player.video,\n         width = video.width || root.width(),\n         height = video.height || root.height(),\n         el = $(\"<div/>\", { 'class': 'flowplayer', css: { width: width, height: height }}),\n         tag = $(\"<video/>\").appendTo(el);\n\n      if (conf.poster) tag.attr(\"poster\", conf.poster);\n\n      // configuration\n      $.each(['origin', 'analytics', 'logo', 'key', 'rtmp'], function(i, key) {\n         if (conf[key]) el.attr(\"data-\" + key, conf[key]);\n      });\n\n      // sources\n      $.each(video.sources, function(i, src) {\n         tag.append($(\"<source/>\", { type: \"video/\" + src.type, src: src.src }));\n      });\n\n      var code = $(\"<foo/>\", { src: \"http://embed.flowplayer.org/5.1.1/embed.min.js\" }).append(el);\n      return $(\"<p/>\").append(code).html().replace(/<(\\/?)foo/g, \"<$1script\");\n   };\n\n   root.fptip(\".fp-embed\", \"is-embedding\");\n\n   area.click(function() {\n      this.select();\n   });\n\n   trigger.click(function() {\n      area.text(player.embedCode());\n      area[0].focus();\n      area[0].select();\n   });\n\n});\n\n\n$.fn.fptip = function(trigger, active) {\n\n   return this.each(function() {\n\n      var root = $(this);\n\n      function close() {\n         root.removeClass(active);\n         $(document).unbind(\".st\");\n      }\n\n      $(trigger || \"a\", this).click(function(e) {\n\n         e.preventDefault();\n\n         root.toggleClass(active);\n\n         if (root.hasClass(active)) {\n\n            $(document).bind(\"keydown.st\", function(e) {\n               if (e.which == 27) close();\n\n            // click:close\n            }).bind(\"click.st\", function(e) {\n               if (!$(e.target).parents(\".\" + active).length) close();\n            });\n         }\n\n      });\n\n   });\n\n};\n\n}(jQuery);\nflowplayer(function(a,b){function j(a){var b=c(\"<a/>\")[0];return b.href=a,b.hostname}var c=jQuery,d=a.conf,e=d.swf.indexOf(\"flowplayer.org\")&&d.e&&b.data(\"origin\"),f=e?j(e):location.hostname,g=d.key;location.protocol==\"file:\"&&(f=\"localhost\"),a.load.ed=1,d.hostname=f,d.origin=e||location.href,e&&b.addClass(\"is-embedded\");if(g&&typeof key_check==\"function\"&&key_check(\"\"+g,f))d.logo&&b.append(c(\"<a>\",{\"class\":\"fp-logo\",href:e}).append(c(\"<img/>\",{src:d.logo})));else{var h=c(\"<a/>\").attr(\"href\",\"http://flowplayer.org\").appendTo(b),i=c(\".fp-controls\",b);b.bind(\"mouseenter mouseleave\",function(b){a.ready&&h.toggle(b.type==\"mouseenter\")}),a.bind(\"progress unload\",function(c){c.type==\"progress\"&&a.video.time<8&&a.engine!=\"flash\"&&b.hasClass(\"is-mouseover\")?(h.show().css({position:\"absolute\",left:6,bottom:i.height()+12,zIndex:99999,width:100,height:20,cursor:\"pointer\",backgroundImage:\"url(http://stream.flowplayer.org/logo.png)\"}),a.load.ed=h.is(\":visible\")):h.hide()})}});"]],"start1":0,"start2":0,"length1":0,"length2":54490}]],"length":54490}
